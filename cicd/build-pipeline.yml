parameters:
- name: serviceConnectionName
  displayName: Name of service connection to connect to AML
  type: string
- name: AMLModelName
  displayName: Name of the AML model whose artifacts will be containerized
  type: string
- name: AMLModelVersion
  displayName: Version of the AML model whose artifacts will be containerized
  type: string
- name: downloadedModelDirectory
  displayName: Directory to temporarily download model artifacts to
  type: string
- name: publishedModelArtifactsName
  displayName: Name under which model artifacts were published
  type: string
- name: containerRegistryResourceGroupName
  displayName: Name of the container registry to push to
  type: string
- name: containerRegistry
  displayName: Name of the container registry to push to
  type: string
- name: dockerImageName
  displayName: Name under which to publish Docker image
  type: string
- name: dockerImageTag
  displayName: Tag under which to publish Docker image
  type: string


jobs:
  - job: BuildPublishModelContainer
    displayName: "Build and publish model container"
    pool: ContainerBuilder
    variables:
      serviceConnection: ${{ parameters.serviceConnectionName }}
      dockerRegistryResourceGroupName: ${{ parameters.containerRegistryResourceGroupName }}
      containerRegistryName: ${{ parameters.containerRegistry }}

    steps:
      - checkout: self

      - task: DownloadPipelineArtifact@2
        inputs:
          source: current
          artifact: ${{ parameters.publishedModelArtifactsName }}
          path: $(Build.SourcesDirectory)/${{ parameters.downloadedModelDirectory }}

      - task: AzureCLI@2
        displayName: Build and Push Docker image
        name: DockerBuildAndPush
        inputs:
          azureSubscription: ${{ variables.serviceConnection }}
          scriptType: 'pscore'
          scriptLocation: 'inlineScript'
          inlineScript: |
            az upgrade
            az acr login -n $(containerRegistryName)
            docker pull $(containerRegistryName).azurecr.io/$(dockerImageName):$(dockerImageTag)
            docker build . -f Dockerfile --cache-from $(containerRegistryName).azurecr.io/$(dockerImageName):$(dockerImageTag) --tag $(containerRegistryName).azurecr.io/$(dockerImageName):$(dockerImageTag) 
            docker push $(containerRegistryName).azurecr.io/$(dockerImageName):$(dockerImageTag) --build-arg AML_MODEL_ID_arg=${{ parameters.AMLModelName }}:${{ parameters.AMLModelVersion }} --build-arg PROJECT_VERSION_arg=$(projectVersion)
